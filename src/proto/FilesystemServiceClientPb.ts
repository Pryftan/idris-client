/**
 * @fileoverview gRPC-Web generated client stub for fs
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v6.31.1
// source: filesystem.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as filesystem_pb from './filesystem_pb'; // proto import: "filesystem.proto"


export class FileSystemClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorListFiles = new grpcWeb.MethodDescriptor(
    '/fs.FileSystem/ListFiles',
    grpcWeb.MethodType.UNARY,
    filesystem_pb.ListFilesRequest,
    filesystem_pb.ListFilesResponse,
    (request: filesystem_pb.ListFilesRequest) => {
      return request.serializeBinary();
    },
    filesystem_pb.ListFilesResponse.deserializeBinary
  );

  listFiles(
    request: filesystem_pb.ListFilesRequest,
    metadata?: grpcWeb.Metadata | null): Promise<filesystem_pb.ListFilesResponse>;

  listFiles(
    request: filesystem_pb.ListFilesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: filesystem_pb.ListFilesResponse) => void): grpcWeb.ClientReadableStream<filesystem_pb.ListFilesResponse>;

  listFiles(
    request: filesystem_pb.ListFilesRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: filesystem_pb.ListFilesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/fs.FileSystem/ListFiles',
        request,
        metadata || {},
        this.methodDescriptorListFiles,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/fs.FileSystem/ListFiles',
    request,
    metadata || {},
    this.methodDescriptorListFiles);
  }

  methodDescriptorGetImage = new grpcWeb.MethodDescriptor(
    '/fs.FileSystem/GetImage',
    grpcWeb.MethodType.UNARY,
    filesystem_pb.GetImageRequest,
    filesystem_pb.GetImageResponse,
    (request: filesystem_pb.GetImageRequest) => {
      return request.serializeBinary();
    },
    filesystem_pb.GetImageResponse.deserializeBinary
  );

  getImage(
    request: filesystem_pb.GetImageRequest,
    metadata?: grpcWeb.Metadata | null): Promise<filesystem_pb.GetImageResponse>;

  getImage(
    request: filesystem_pb.GetImageRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: filesystem_pb.GetImageResponse) => void): grpcWeb.ClientReadableStream<filesystem_pb.GetImageResponse>;

  getImage(
    request: filesystem_pb.GetImageRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: filesystem_pb.GetImageResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/fs.FileSystem/GetImage',
        request,
        metadata || {},
        this.methodDescriptorGetImage,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/fs.FileSystem/GetImage',
    request,
    metadata || {},
    this.methodDescriptorGetImage);
  }

}

